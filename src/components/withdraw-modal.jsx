/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/Iq0Ghm5ltTi
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/
'use client'
import { useState } from "react"
import { zodResolver } from "@hookform/resolvers/zod"
import { useForm, useFieldArray } from "react-hook-form"
import { z } from "zod"

import { Dialog, DialogTrigger, DialogContent, DialogHeader, DialogTitle, DialogDescription } from "@/components/ui/dialog"
import { Button } from "@/components/ui/button"
import { Form, FormField, FormItem } from "./ui/form";
import { Label } from "@/components/ui/label";
import { Input } from "@/components/ui/input";


export function WithdrawModal({ user }) {
  const [success, setSuccess] = useState(false);

  const form = useForm({
    resolver: zodResolver(
      z.object({
        coins: z.number().nonnegative()
      })
    )
  });

  const onSubmit = async (e) => {
    e.preventDefault();

    // send email to admin with withdrawal request
    // use firebase functions to send email

    // show success message

    // close modal

    const formData = new FormData(e.target);
    const coins = formData.get('coins');

    try {

      const response = await fetch('/api/withdrawal-request', {
        method: 'POST',
        body: JSON.stringify({ 
          user: user,
          coins: coins
        }),
        headers: {
          'Content-Type': 'application/json'
        }
      });

      setSuccess(true);
    } catch (error) {
      console.error(error);
      setSuccess(false);
    }

  }

  return (
    (<Dialog>
      <DialogTrigger asChild>
        <Button variant="default" size="sm">Withdraw</Button>
      </DialogTrigger>
      <DialogContent className="sm:max-w-[400px]">
        <DialogHeader>
          <DialogTitle>Withdraw Coins</DialogTitle>
          <DialogDescription>Enter the amount of coins to withdraw from your account using the input field below.</DialogDescription>
        </DialogHeader>
        <div className="flex flex-col">
          <Form  {...form}>
            <form onSubmit={onSubmit} className="flex flex-col ">
              <FormField name="coins" control={form.control} render={({ field }) => (
                <FormItem>
                    <Label htmlFor={field.coins}>Coins</Label>
                    <Input {...field} placeholder="100" />
                  </FormItem>
              )} />
              <Button variant="default" size="sm" className="mt-4" type="submit" disabled={form.formState.isSubmitting || success}>
                {form.formState.isSubmitting ? 'Submitting...' : success ? 'Request Sent âœ“' : 'Submit'}
              </Button>
            </form>
          </Form>
        </div>
      </DialogContent>
    </Dialog>)
  );
}
